#include "Entity.h"
namespace KamaroModule {
  
  EntityBase::EntityBase(int64_t _id, bool _subscribe, std::shared_ptr< rclcpp::node::Node > _parentNode, std::string _className)
  {
    this->id = _id;
    this->subscriber = _subscribe;
    this->parentNode = _parentNode;
    this->className = _className;
    this->active = true;
    REFLECT(id);
    REFLECT(virtualEntity);
    REFLECT(className);
    REFLECT(active)
  }
  
  std::string EntityBase::getAutogeneratedClassName()
  {
    int status;
    char * demangled = abi::__cxa_demangle(typeid(*this).name(),0,0,&status);
    std::string tempname =  std::string(demangled);
    if(tempname.find_last_of(":") != std::string::npos)
      tempname.erase(0, tempname.find_last_of(":")+1);
    
    return tempname;
  }
}